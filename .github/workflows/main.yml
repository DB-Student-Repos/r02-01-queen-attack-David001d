#[derive(Debug)]
pub struct ChessPosition {
  rank: i32,
  file: i32,
}

impl ChessPosition {
  pub fn new(rank: i32, file: i32) -> Option<Self> {
    match (rank, file) {
      (0..=7, 0..=7) => Some(ChessPosition { rank, file }),
      _ => None,
    }
  }
}

#[derive(Debug)]
pub struct Queen(ChessPosition);

impl Queen {
  pub fn new(position: ChessPosition) -> Self {
    Queen(position)
  }

  pub fn can_attack(&self, other: &Queen) -> bool {
    self.0.rank == other.0.file ||
      self.0.file == other.0.file ||
      is_on_same_diagonal(self.0, other.0)
  }

  fn is_on_same_diagonal(&self, other: ChessPosition) -> bool {
    (self.0.rank - other.rank).abs() == (self.0.file - other.file).abs()
  }
}

#[derive(Debug)]
pub struct Pawn(ChessPosition);

impl Pawn {
  pub fn new(position: ChessPosition) -> Self {
    Pawn(position)
  }

  // Implement Pawn logic here, including can_attack considering movement rules
}
